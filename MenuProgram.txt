START MenuProgram

    MAIN:

        fileName <-- "jrc-covid-19-all-days-of-world_ASSIGNMENT-FIXED.csv"
        csvLength <-- findLengthOfCSV(fileName)
        covidRecordArray <-- NEW CovidRecord[] LENGTH OF csvLength
        covidRecordArray <-- importFromCSV(fileName, covidRecordArray)

        PRINT ("Welcome to the JRC Covid-19 Analaysis Program.\n" + "A total of " + (csvLength -1) + " records have been loaded.\n")

        mainMenu = NEW String[] LENGTH OF 10
        mainMenu = ["Exit", "All Countries", "South America", "North America", "Oceania", "Asia", "Africa", "Europe", "Enter a country", "Enter a date"]

        statMenu = new String[] LENGTH OF 8
        statMenu = ["Back", "Total number of cumulatively positive cases", "Total number of cumulatively deceased cases", 
                    "Total number of cumulatively recovered cases", "Average daily number of currently positive cases", 
                    "Number and percentage of cumulatively positive cases recovered", "Number and percentage of cumulatively positive cases deceased", 
                    "All of the above statistics"]
        
        displayMainMenu(mainMenu, statMenu, covidRecordArray)

    END MAIN

    MODULE: ouputMenu
    IMPORT: pMenu (String array)
    EXPORT: userInput (Integer)
    ASSERTION: Outputs a menu derived from string array and returns the user's choice
    ALGORITHM: 
        PRINT "Please select an option from below:\n"
        FOR i <-- 0 TO i < pMenu.Length INCREASE BY +1
            PRINT i " > " pMenu[i]
        END FOR
        DO
            PRINT "\nEnter selection: "
            userInput <-- USER INPUT
        WHILE (userInput < 0 AND pMenu.Length < userInput)
        RETURN userInput

    MODULE: displayMainMenu
    IMPORT: pMainMenu (String array), pStatMenu (String array), pCovidRecordArray (CovidRecord array)
    EXPORT: none
    ASSERTION: Display the main menu and, based on user input, move to the next phase of the program
    ALGORITHM: 
        run <-- TRUE
        DO
            menuChoice <-- outputMenu(pMainMenu)
            IF (menuChoice = 0) THEN
                PRINT "Goodbye."
                run <-- FALSE
            ELSE IF (menuChoice = 1) THEN 
                displayStatistic(pStatMenu, pCovidRecordArray, pMainMenu, menuChoice);
            ELSE IF (menuChoice = 2) THEN 
                numCovRecMatchFilter <-- searchCovRecObjContinent(pCovidRecordArray, "SA")
                filterArray <-- NEW CovidRecord[] OF LENGTH numCovRecMatchFilter
                filterArray <-- setCovRecFilObjContinent(numCovRecMatchFilter, pCovidRecordArray, "SA")
                displayStatistic(pStatMenu, filterArray, pMainMenu, menuChoice)
            ELSE IF (menuChoice = 3) THEN
                numCovRecMatchFilter <-- searchCovRecObjContinent(pCovidRecordArray, "NA")
                filterArray <-- NEW CovidRecord[] OF LENGTH numCovRecMatchFilter
                filterArray <-- setCovRecFilObjContinent(numCovRecMatchFilter, pCovidRecordArray, "NA")
                displayStatistic(pStatMenu, filterArray, pMainMenu, menuChoice)
            ELSE IF (menuChoice = 4) THEN
                numCovRecMatchFilter <-- searchCovRecObjContinent(pCovidRecordArray, "OC")
                filterArray <-- NEW CovidRecord[] OF LENGTH numCovRecMatchFilter
                filterArray <-- setCovRecFilObjContinent(numCovRecMatchFilter, pCovidRecordArray, "OC")
                displayStatistic(pStatMenu, filterArray, pMainMenu, menuChoice)
            ELSE IF (menuChoice = 5) THEN
                numCovRecMatchFilter <-- searchCovRecObjContinent(pCovidRecordArray, "AS")
                filterArray <-- NEW CovidRecord[] OF LENGTH numCovRecMatchFilter
                filterArray <-- setCovRecFilObjContinent(numCovRecMatchFilter, pCovidRecordArray, "AS")
                displayStatistic(pStatMenu, filterArray, pMainMenu, menuChoice)
            ELSE IF (menuChoice = 6) THEN
                numCovRecMatchFilter <-- searchCovRecObjContinent(pCovidRecordArray, "AF")
                filterArray <-- NEW CovidRecord[] OF LENGTH numCovRecMatchFilter
                filterArray <-- setCovRecFilObjContinent(numCovRecMatchFilter, pCovidRecordArray, "AF")
                displayStatistic(pStatMenu, filterArray, pMainMenu, menuChoice)
            ELSE IF (menuChoice = 7) THEN
                numCovRecMatchFilter <-- searchCovRecObjContinent(pCovidRecordArray, "EU")
                filterArray <-- NEW CovidRecord[] OF LENGTH numCovRecMatchFilter
                filterArray <-- setCovRecFilObjContinent(numCovRecMatchFilter, pCovidRecordArray, "EU")
                displayStatistic(pStatMenu, filterArray, pMainMenu, menuChoice)
            ELSE IF (menuChoice = 8) THEN
                PRINT "Please enter the country you would like to analyse: "
                input <-- USER INPUT
                numCovRecMatchFilter <-- searchCovRecObjCountry(pCovidRecordArray, input)
                WHILE (numCovRecMatchFilter <= 0)
                    PRINT "Your input does not match any country name in the database, try again, remember to use capital letters: "
                    input <-- USER INPUT
                    numCovRecMatchFilter <-- searchCovRecObjCountry(pCovidRecordArray, input)
                END WHILE
                filterArray <-- NEW CovidRecord[] OF LENGTH numCovRecMatchFilter
                filterArray <-- setCovRecFilObjCountry(numCovRecMatchFilter, pCovidRecordArray, input)
                displayStatistic(sc, pStatMenu, filterArray, pMainMenu, menuChoice)
            ELSE IF (menuChoice = 9) THEN 
                PRINT "Please enter the date you would like to analyse: "
                input <-- USER INPUT
                numCovRecMatchFilter <-- searchCovRecObjDate(pCovidRecordArray, input)
                WHILE (numCovRecMatchFilter <= 0)
                    PRINT "Your input does not match any date in the database, try again using this format '12/2/2022': "
                    input <-- USER INPUT
                    numCovRecMatchFilter <-- searchCovRecObjDate(pCovidRecordArray, input)
                END WHILE
                filterArray <-- NEW CovidRecord[] OF LENGTH numCovRecMatchFilter
                filterArray <-- setCovRecFilObjDate(numCovRecMatchFilter, pCovidRecordArray, input)
                displayStatistic(sc, pStatMenu, filterArray, pMainMenu, menuChoice)
            ELSE
                PRINT menuChoice + " is an invalid menu ID, please try again: \n"
            END IF
        WHILE (run IS TRUE)

    MODULE: displayStatistic
    IMPORT: pStatMenu (String array), pCovidRecordArray (CovidRecord array), pMainMenu (String array), pMainMenuChoice (int)
    EXPORT: none
    ASSERTION: Prints the desired statistics based on user input
    ALGORITHM: 
        run <-- TRUE
        DO
            menuChoice <-- outputMenu(pStatMenu)
            IF (menuChoice = 0)
                run <-- FALSE
                PRINT "Going back..."
            ELSE IF (menuChoice = 1)
                printTotalCumPos(pCovidRecordArray, pMainMenuChoice, pMainMenu)
            ELSE IF (menuChoice = 2)
                printTotalCumDec(pCovidRecordArray, pMainMenuChoice, pMainMenu)
            ELSE IF (menuChoice = 3)
                printTotalCumRec(pCovidRecordArray, pMainMenuChoice, pMainMenu)
            ELSE IF (menuChoice = 4)
                printAvgDailyCurrPos(pCovidRecordArray, pMainMenuChoice, pMainMenu)
            ELSE IF (menuChoice = 5)
                printPercentRecOverPos(pCovidRecordArray, pMainMenuChoice, pMainMenu)
            ELSE IF (menuChoice = 6)
                printPercentDecOverPos(pCovidRecordArray, pMainMenuChoice, pMainMenu)
            ELSE IF (menuChoice = 7)
                printTotalCumPos(pCovidRecordArray, pMainMenuChoice, pMainMenu)
                printTotalCumDec(pCovidRecordArray, pMainMenuChoice, pMainMenu)
                printTotalCumRec(pCovidRecordArray, pMainMenuChoice, pMainMenu)
                printAvgDailyCurrPos(pCovidRecordArray, pMainMenuChoice, pMainMenu)
                printPercentRecOverPos(pCovidRecordArray, pMainMenuChoice, pMainMenu)
                printPercentDecOverPos(pCovidRecordArray, pMainMenuChoice, pMainMenu)
            ELSE 
                PRINT menuChoice + " is an invalid menu ID, please try again: \n"
            END IF
        WHILE (run IS TRUE)

    MODULE: printTotalCumPos
    IMPORT: pCovidRecordArray (CovidRecord array), pMainMenuChoice (integer), pMainMenu (String array)
    EXPORT: none
    ASSERTION: distinguishes covidRecordArray to an array of only cumulative positive and prints the total
    ALGORITHM: 
        cumPosArray <-- distCovRecToCumPos(pCovidRecordArray)
        totalCumPos <-- calcTotal(cumPosArray)
        readableOutput <-- calcReadableString(pMainMenuChoice, pMainMenu)
        out <-- "Cumulative number of positive cases in " + readableOutput + ": " + totalCumPos
        PRINT out

    MODULE: printTotalCumDec
    IMPORT: pCovidRecordArray (CovidRecord array), pMainMenuChoice (integer), pMainMenu (String array)
    EXPORT: none
    ASSERTION: distinguishes covidRecordArray to an array of only cumulative deceased and prints the total
    ALGORITHM: 
        cumDecArray <-- distCovRecToCumPos(pCovidRecordArray)
        totalCumDec <-- calcTotal(cumDecArray)
        readableOutput <-- calcReadableString(pMainMenuChoice, pMainMenu)
        out <-- "Cumulative number of deceased cases in " + readableOutput + ": " + totalCumDec
        PRINT out

    MODULE: printTotalCumRec
    IMPORT: pCovidRecordArray (CovidRecord array), pMainMenuChoice (integer), pMainMenu (String array)
    EXPORT: none
    ASSERTION: distinguishes covidRecordArray to an array of only cumulative recovered and prints the total
    ALGORITHM: 
        cumRecArray <-- distCovRecToCumRec(pCovidRecordArray)
        totalCumRec <-- calcTotal(cumRecArray)
        readableOutput <-- calcReadableString(pMainMenuChoice, pMainMenu)
        out <-- "Cumulative number of recovered cases in " + readableOutput + ": " + totalCumRec
        PRINT out

    MODULE: printAvgDailyCurrPos
    IMPORT: pCovidRecordArray (CovidRecord array), pMainMenuChoice (integer), pMainMenu (String array)
    EXPORT: none
    ASSERTION: distinguishes covidRecordArray to an array of only cumulative deceased and prints the total
    ALGORITHM: 
        avgLengthOfMonth ((31 * 6) + (30 * 5) + 28) / 12
        currPosArray <-- distCovRecToCurrPos(pCovidRecordArray)
        totalCurrPos <-- calcTotal(currPosArray)
        avgDailyCurrPos <-- (totalCurrPos * avgLengthOfMonth) / 365
        readableOutput <-- calcReadableString(pMainMenuChoice, pMainMenu)
        out <-- ""The (approximate) average daily currently positive number of cases in " + readableOutput + " is: " + avgDailyCurrPos
        PRINT out

    MODULE: printPercentRecOverPos
    IMPORT: pCovidRecordArray (CovidRecord array), pMainMenuChoice (integer), pMainMenu (String array)
    EXPORT: none
    ASSERTION: prints the cumulatively recovered over cumulatively positive in a readable format
    ALGORITHM: 
        cumPosArray <-- distCovRecToCumPos(pCovidRecordArray)
        totalCumPos <-- calcTotal(cumPosArray)

        cumRecArray <-- distCovRecToCumRec(pCovidRecordArray)
        totalCumRec <-- calcTotal(cumRecArray)

        percentRecOverPos <-- (cumRec / cumPos) * 100

        readableOutput = calcReadableString(pMainMenuChoice, pMainMenu);
        out = (percentRecOverPos + "% (" + cumRec + "/" + cumPos + ") cases recovered in " + readableOutput + "."
        PRINT out

    MODULE: printPercentDecOverPos
    IMPORT: pCovidRecordArray (CovidRecord array), pMainMenuChoice (integer), pMainMenu (String array)
    EXPORT: none
    ASSERTION: prints the cumulatively deceased over cumulatively positive in a readable format
    ALGORITHM: 
        cumPosArray <-- distCovRecToCumPos(pCovidRecordArray)
        totalCumPos <-- calcTotal(cumPosArray)

        cumDecArray <-- distCovRecToCumDec(pCovidRecordArray)
        totalCumDec <-- calcTotal(cumDecArray)

        percentDecOverPos <-- (cumDec / cumPos) * 100

        readableOutput = calcReadableString(pMainMenuChoice, pMainMenu);
        out = (percentDecOverPos + "% (" + cumDec + "/" + cumPos + ") cases recovered in " + readableOutput + "."
        PRINT out

    MODULE: 
    IMPORT: 
    EXPORT: 
    ASSERTION: 
    ALGORITHM: 

END MenuProgram